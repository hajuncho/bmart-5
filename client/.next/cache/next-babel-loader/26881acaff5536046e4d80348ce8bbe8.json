{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport * as S from './styled';\nimport { AiOutlineNotification } from 'react-icons/ai';\nimport { FaArrowLeft, FaSearch, FaBars, FaRegHeart, FaHeart, FaUndoAlt } from 'react-icons/fa';\nimport { IoMdCloseCircleOutline } from 'react-icons/io';\nimport { IconType } from '@utils/constants';\n\nconst findIcon = iconName => {\n  switch (IconType[iconName]) {\n    case IconType.ARROW_LEFT:\n      return __jsx(FaArrowLeft, null);\n\n    case IconType.SEARCH:\n      return __jsx(FaSearch, null);\n\n    case IconType.BARS:\n      return __jsx(FaBars, null);\n\n    case IconType.REG_HEART:\n      return __jsx(FaRegHeart, null);\n\n    case IconType.HEART:\n      return __jsx(FaHeart, null);\n\n    case IconType.REFRESH:\n      return __jsx(FaUndoAlt, null);\n\n    case IconType.CLOSE:\n      return __jsx(IoMdCloseCircleOutline, null);\n\n    case IconType.NOTIFICATION:\n      return __jsx(AiOutlineNotification, null);\n\n    default:\n      return;\n  }\n};\n\nexport const Icon = (_ref) => {\n  let {\n    icon,\n    onClick\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"icon\", \"onClick\"]);\n\n  return __jsx(S.Icon, _extends({\n    role: icon,\n    onClick: onClick\n  }, props), findIcon(icon));\n};","map":null,"metadata":{},"sourceType":"module"}